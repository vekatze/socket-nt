import {
  core.file.descriptor {descriptor},
  core.int.io {print-int-line},
  core.int.show {show-int},
  core.system {get-error-message},
  core.text {format, text-byte-length},
  core.text.io {print-line},
  this.address-family {AF_INET},
  this.socket {Config, Socket-Address, socket-address, start-server},
  this.socket-type {SOCK_STREAM},
}

define main(): unit {
  let server-config =
    Config of {
      family := AF_INET,
      comm-type := SOCK_STREAM,
      reuse-socket := False,
      protocol := 0,
      port := 8080,
      address := "0.0.0.0",
      backlog := 128,
      threads := 10,
      interpreter := {
        function (address: socket-address, _: descriptor): text {
          let Socket-Address of {ip-address, port} = address;
          pin ip-address = ip-address;
          print("client: ");
          print(ip-address);
          print(":");
          print-int-line(magic cast(_, _, port));
          let body = *"hello";
          let body-len on body = text-byte-length(body);
          format("HTTP/1.1 200 OK\r\nContent-Length: {}\r\n\r\n{}", List[show-int(body-len), body])
        }
      },
    };
  match start-server(server-config) {
  | Left(errno) =>
    pin error = get-error-message(errno);
    print("error: ");
    print-line(error)
  | Right(_) =>
    Unit
  }
}
