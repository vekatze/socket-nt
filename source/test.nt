import {
  AF,
  core.errno {get-error-message},
  core.int.show {show-int},
  core.text {format, text-byte-length},
  this.socket {Config, Socket-Address, socket-address, start-server},
  this.socket-type {SOCK_STREAM},
}

define main(): unit {
  let server-config =
    Config of {
      family = AF.AF_INET,
      comm-type = SOCK_STREAM,
      reuse-socket = True,
      protocol = 0,
      port = 8080,
      address = "0.0.0.0",
      backlog = 128,
      threads = 10,
      interpreter = {
        function (address: socket-address, t: text): text {
          let Socket-Address of {ip-address, port} = address in
          printf("client: {}:{}\n", [ip-address, show-int(magic cast(_, _, port))]);
          let len on t = text-byte-length(t) in
          let body = format("{\"key\": \"Hello, world!\", \"request-length\": {}}", [show-int(len)]) in
          let body-len on body = text-byte-length(body) in
          printf("request:\n{}\n", [t]);
          format("HTTP/1.1 200 OK\r\nContent-Length: {}\r\n\r\n{}", [show-int(body-len), body])
        }
      },
    }
  in
  match start-server(server-config) {
  | Error(errno) =>
    printf("error: {}\n", [get-error-message(errno)])
  | OK(_) =>
    Unit
  }
}
