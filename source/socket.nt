import {
  core.c-int {C-Int, c-int, from-c-int},
  core.c-string {c-string, from-c-string, to-c-string},
  core.channel {receive, send},
  core.file {close},
  core.file.descriptor {descriptor},
  core.memory {load-int16, load-int32, store-int, store-int16, store-int32, store-int8},
  core.pointer {shift},
  core.system {report-system-error, system},
  core.text.io {write},
  core.word,
  this.address-family {AF_INET, address-family},
  this.socket-type {socket-type},
}

data _socklen-t {
| Socklen(int32)
}

inline _in-addr-t: type {
  // unknown
  int32
}

foreign {
  socket(c-int, c-int, c-int): c-int,
  setsockopt(c-int, c-int, c-int, pointer, _socklen-t): c-int,
  getsockopt(c-int, c-int, c-int, pointer, pointer): c-int,
  inet_addr(pointer): _in-addr-t,
  inet_ntop(c-int, pointer, pointer, _socklen-t): pointer,
  bind(c-int, pointer, _socklen-t): c-int,
  listen(c-int, c-int): c-int,
  accept(c-int, pointer, pointer): c-int,
  htons(int16): int16,
  ntohs(int16): int16,
}

inline sockaddr-in-size: int8 {
  16
}

inline SOL_SOCKET: c-int {
  introspect operating-system {
  | darwin =>
    65535
  | linux =>
    1
  }
}

inline SO_REUSEADDR: c-int {
  introspect operating-system {
  | darwin =>
    4
  | linux =>
    2
  }
}

inline INET_ADDRSTRLEN: _socklen-t {
  Socklen(16)
}

define _make-socket-reusable(s: descriptor): system(unit) {
  let s = magic cast(descriptor, c-int, s);
  let option-size = Socklen(trunc-int-int32(core.word.size));
  let enable = magic alloca(int, 1);
  store-int(1, enable);
  let result = magic external setsockopt(s, SOL_SOCKET, SO_REUSEADDR, enable, option-size);
  let so-reuse-port = 512;
  let _ = magic external setsockopt(s, SOL_SOCKET, so-reuse-port, enable, option-size);
  if eq-int(from-c-int(result), 0) {
    Right(Unit)
  } else {
    report-system-error()
  }
}

define _create-socket(af: address-family, comm-type: socket-type, protocol: c-int): system(descriptor) {
  let d =
    magic external socket(
      C-Int(sext-int8-int32(this.address-family.decode(af))),
      this.socket-type.decode(comm-type),
      protocol,
    );
  if lt-int(from-c-int(d), 0) {
    report-system-error()
  } else {
    Right(magic cast(c-int, descriptor, d))
  }
}

define _inet-addr(address: &text): _in-addr-t {
  pin addr = to-c-string(address);
  magic external inet_addr(magic cast(&c-string, pointer, addr))
}

define _bind-socket(af: address-family, s: descriptor, address: &text, port: int16): system(unit) {
  introspect operating-system {
  | darwin =>
    match af {
    | AF_INET =>
      let server-addr = magic alloca(int8, 16);
      let port': int16 = magic external htons(port);
      let in-addr = _inet-addr(address);
      store-int8(sockaddr-in-size, server-addr);
      store-int8(this.address-family.decode(af), shift(server-addr, 1));
      store-int16(port', shift(server-addr, 2));
      store-int32(in-addr, shift(server-addr, 4));
      let result =
        magic external bind(
          magic cast(descriptor, c-int, s),
          server-addr,
          Socklen(zext-int8-int32(sockaddr-in-size)),
        );
      if lt-int(from-c-int(result), 0) {
        report-system-error()
      } else {
        Right(Unit)
      }
    }
  | linux =>
    match af {
    | AF_INET =>
      // suppress "Imported but not used: `store-int8`"
      let _ = store-int8;
      let server-addr = magic alloca(int8, 16);
      let port': int16 = magic external htons(port);
      let in-addr = _inet-addr(address);
      store-int16(zext-int8-int16(this.address-family.decode(af)), shift(server-addr, 0));
      store-int16(port', shift(server-addr, 2));
      store-int32(in-addr, shift(server-addr, 4));
      let result =
        magic external bind(
          magic cast(descriptor, c-int, s),
          server-addr,
          Socklen(zext-int8-int32(sockaddr-in-size)),
        );
      if lt-int(from-c-int(result), 0) {
        report-system-error()
      } else {
        Right(Unit)
      }
    }
  }
}

define _listen-socket(s: descriptor, backlog: c-int): system(unit) {
  let result =
    magic external listen(
      magic cast(descriptor, c-int, s),
      backlog,
    );
  if lt-int(from-c-int(result), 0) {
    report-system-error()
  } else {
    Right(Unit)
  }
}

data socket-address {
| Socket-Address(
    ip-address: text,
    port: int16,
  )
}

data client-summary {
| Client-Summary(
    fd: descriptor,
    address: socket-address,
  )
}

inline _consumer<a>(ch: &channel(client-summary), !request-interpreter: (socket-address, descriptor) -> text): system(a) {
  let f =
    define loop(): system(a) {
      let summary = receive(ch);
      let Client-Summary of {fd, address} = summary;
      let response = !request-interpreter(address, fd);
      let _ on response = write(fd, response);
      try _ = close(fd);
      let _ = response;
      loop()
    };
  f()
}

inline _process-request(ch: &channel(client-summary), s: descriptor): system(unit) {
  let client-addr = magic alloca(int8, 16);
  let address = magic alloca(int8, 4);
  store-int32(zext-int8-int32(sockaddr-in-size), address);
  let client-fd = magic external accept(magic cast(descriptor, c-int, s), client-addr, address);
  let client-len = load-int32(address);
  let _ = client-len;
  if lt-int(from-c-int(client-fd), 0) {
    report-system-error()
  } else {
    let client-ip-ptr: &c-string = magic cast(pointer, &c-string, magic alloca(int8, 16));
    let _ =
      magic external inet_ntop(
        C-Int(sext-int8-int32(this.address-family.decode(AF_INET))),
        shift(client-addr, 4),
        magic cast(&c-string, pointer, client-ip-ptr),
        INET_ADDRSTRLEN,
      );
    let client-ip-address = from-c-string(client-ip-ptr);
    let client-port = load-int16(shift(client-addr, 2));
    let client-port': int16 = magic external ntohs(client-port);
    let fd = magic cast(c-int, descriptor, client-fd);
    let summary = Client-Summary(fd, Socket-Address(client-ip-address, client-port'));
    send(ch, summary);
    Right(Unit)
  }
}

define _create-server-socket(
  af: address-family,
  comm-type: socket-type,
  reuse-socket: bool,
  protocol: c-int,
  address: &text,
  port: int16,
  connection-queue-size: c-int,
): system(descriptor) {
  try s = _create-socket(af, comm-type, protocol);
  try _ =
    if reuse-socket {
      _make-socket-reusable(s)
    } else {
      Right(Unit)
    };
  try _ = _bind-socket(af, s, address, port);
  try _ = _listen-socket(s, connection-queue-size);
  Right(s)
}

define _consumer-loop<a>(q: &channel(thread(system(unit)))): system(a) {
  let val-thread = receive(q);
  try _ = attach {val-thread};
  _consumer-loop(q)
}

define _wait-all<a>(ys: list(thread(a))): unit {
  match ys {
  | Nil =>
    Unit
  | Cons(z, zs) =>
    let _ = attach {z};
    _wait-all(zs)
  }
}

inline _create-consumers(
  ch: &channel(client-summary),
  n: int,
  !f: (socket-address, descriptor) -> text,
): list(thread(system(unit))) {
  let f =
    define self(n: int): list(thread(system(unit))) {
      if eq-int(n, 0) {
        Nil
      } else {
        let consumer = detach {_consumer(ch, !f)};
        let consumers = self(sub-int(n, 1));
        Cons(consumer, consumers)
      }
    };
  f(n)
}

inline _server-loop(num-of-threads: int, s: descriptor, f: (socket-address, descriptor) -> text): system(unit) {
  let ch = make-channel();
  let result on ch = {
    let consumers = _create-consumers(ch, num-of-threads, f);
    let producer =
      define self(): system(unit) {
        try _ = _process-request(ch, s);
        self()
      };
    try _ = producer();
    // unreachable
    Right(_wait-all(consumers))
  };
  let _ = ch;
  result
}

data config {
| Config(
    family: address-family,
    comm-type: socket-type,
    reuse-socket: bool,
    protocol: c-int,
    port: int16,
    address: &text,
    backlog: c-int,
    threads: int,
    interpreter: (socket-address, descriptor) -> text,
  )
}

inline start-server(c: config): system(unit) {
  let Config of {family, comm-type, reuse-socket, protocol, address, port, backlog, interpreter, threads} = c;
  try s = _create-server-socket(family, comm-type, reuse-socket, protocol, address, port, backlog);
  _server-loop(threads, s, interpreter)
}
