import {
  AF,
  core.errno {Errno, report-system-error, system},
  core.memory {store-int},
  core.text {_get-content-pointer, format, text-byte-length},
  core.word,
  this.address-family {address-family},
  this.socket-type {SOCK_STREAM, socket-type},
}

foreign {
  socket(int, int, int): int,
  setsockopt(int, int, int, pointer, int): int,
  inet_addr(pointer): int,
  bind(int, pointer, int): int,
  listen(int, int): int,
  accept(int, pointer, pointer): int,
  htons(int16): int16,
  close(int): int,
  snprintf(pointer, int, pointer): int,
  sprintf(pointer, pointer): int,
}

constant sockaddr-in-size: int {
  16
}

constant SOL_SOCKET: int {
  introspect os {
  | darwin =>
    65535
  | linux =>
    1
  }
}

constant SO_REUSEADDR: int {
  introspect os {
  | darwin =>
    4
  | linux =>
    2
  }
}

define _make-socket-reusable(s: descriptor): system(unit) {
  let option-size: int = core.word.size in
  let enable = magic alloca(int, 1) in
  store-int(1, enable);
  let result: int = magic external setsockopt(s, SOL_SOCKET, SO_REUSEADDR, enable, option-size) in
  if eq-int(result, 0) {
    Pass(Unit)
  } else {
    report-system-error()
  }
}

define _create-socket(af: address-family, comm-type: socket-type, protocol: int): system(descriptor) {
  let d =
    magic external socket(
      AF.decode(af),
      this.socket-type.decode(comm-type),
      protocol,
    )
  in
  if lt-int(d, 0) {
    report-system-error()
  } else {
    Pass(magic cast(int, descriptor, d))
  }
}

define _inet-addr(address: &text): int {
  let addr'' = core.text.append(address, "\0") in
  let result2 on addr'' = magic external inet_addr(_get-content-pointer(addr'')) in
  let _ = addr'' in
  result2
}

define _bind-socket(af: address-family, s: descriptor, address: &text, port: int16): system(unit) {
  introspect os {
  | darwin =>
    match af {
    | AF.AF_INET =>
      let server-addr = magic alloca(int8, 16) in
      let port': int16 = magic external htons(port) in
      let in-addr = _inet-addr(address) in
      magic store(int8, sockaddr-in-size, server-addr);
      magic store(int8, AF.decode(af), add-int(server-addr, 1));
      magic store(int16, port', add-int(server-addr, 2));
      magic store(int32, in-addr, add-int(server-addr, 4));
      let result = magic external bind(s, server-addr, sockaddr-in-size) in
      if lt-int(result, 0) {
        report-system-error()
      } else {
        Pass(Unit)
      }
    }
  | linux =>
    match af {
    | AF.AF_INET =>
      let server-addr = magic alloca(int8, 16) in
      let port': int16 = magic external htons(port) in
      let in-addr = _inet-addr(address) in
      magic store(int16, AF.decode(af), add-int(server-addr, 0));
      magic store(int16, port', add-int(server-addr, 2));
      magic store(int32, in-addr, add-int(server-addr, 4));
      let result = magic external bind(s, server-addr, sockaddr-in-size) in
      if lt-int(result, 0) {
        report-system-error()
      } else {
        Pass(Unit)
      }
    }
  }
}

define _listen-socket(s: descriptor, backlog: int): system(unit) {
  let result = magic external listen(s, backlog) in
  if lt-int(result, 0) {
    report-system-error()
  } else {
    Pass(Unit)
  }
}

inline _process-request(ch: &channel(flow(system(unit))), s: descriptor, f: (text) -> text): system(unit) {
  let client-addr = magic alloca(int8, 16) in
  let address = magic alloca(int8, 4) in
  magic store(int32, sockaddr-in-size, address);
  let client-fd = magic external accept(s, client-addr, address) in
  let client-len: int = magic load(int32, address) in
  let _ = client-len in
  if lt-int(client-fd, 0) {
    report-system-error()
  } else {
    let fd = magic cast(int, descriptor, client-fd) in
    let some-flow: flow(system(unit)) =
      detach {
        try request = read(fd) in
        let response = f(request) in
        let _ on response =
          try _ = write(response, fd) in
          close(fd)
        in
        let _ = response in
        Pass(Unit)
      }
    in
    send(ch, some-flow);
    Pass(Unit)
  }
}

define _create-server-socket(
  af: address-family,
  comm-type: socket-type,
  reuse-socket: bool,
  protocol: int,
  address: &text,
  port: int16,
  connection-queue-size: int,
): system(descriptor) {
  try s = _create-socket(af, comm-type, protocol) in
  try _ =
    if reuse-socket {
      _make-socket-reusable(s)
    } else {
      Pass(Unit)
    }
  in
  try _ = _bind-socket(af, s, address, port) in
  try _ = _listen-socket(s, connection-queue-size) in
  Pass(s)
}

define _consumer-loop<a>(q: &channel(flow(system(unit)))): system(a) {
  let val-flow = receive(q) in
  try _ = attach {val-flow} in
  _consumer-loop(q)
}

inline _server-loop(ch: &channel(flow(system(unit))), s: descriptor, f: (text) -> text): system(unit) {
  let loop =
    define self() {
      try _ = _process-request(ch, s, f) in
      self()
    }
  in
  loop()
}

data config {
| Config(
    family: address-family,
    comm-type: socket-type,
    reuse-socket: bool,
    protocol: int,
    port: int16,
    address: &text,
    backlog: int,
    interpreter: (text) -> text,
  )
}

inline start-server(c: config): system(unit) {
  let Config of {family, comm-type, reuse-socket, protocol, address, port, backlog, interpreter} = c in
  try s = _create-server-socket(family, comm-type, reuse-socket, protocol, address, port, backlog) in
  printf("listening {}:{}\n", [*address, %ld(magic cast(_, _, port))]);
  let ch = new-channel() in
  let result on ch =
    let fl = detach {_consumer-loop(ch)} in
    try _ = _server-loop(ch, s, interpreter) in
    attach {fl}
  in
  let _ = ch in
  result
}

define zen(): unit {
  let server-config =
    Config of {
      family = AF.AF_INET,
      comm-type = SOCK_STREAM,
      reuse-socket = True,
      protocol = 0,
      port = 8080,
      address = "0.0.0.0",
      backlog = 128,
      interpreter = {
        function (t: text): text {
          let len on t = text-byte-length(t) in
          let body = format("{\"key\": \"Hello, world!\", \"request-length\": {}}", [%ld(len)]) in
          let body-len on body = text-byte-length(body) in
          printf("request:\n{}\n", [t]);
          format("HTTP/1.1 200 OK\r\nContent-Length: {}\r\n\r\n{}", [%ld(body-len), body])
        }
      },
    }
  in
  match start-server(server-config) {
  | Fail(Errno(i)) =>
    printf("failed to start a server. error code: {}\n", [%ld(i)])
  | Pass(_) =>
    Unit
  }
}

define main(): unit {
  zen()
}
